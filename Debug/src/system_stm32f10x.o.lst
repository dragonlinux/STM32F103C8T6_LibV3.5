   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.section	.data.SystemCoreClock,"aw",%progbits
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 00A24A04 		.word	72000000
  25              		.global	AHBPrescTable
  26              		.section	.data.AHBPrescTable,"aw",%progbits
  27              		.align	2
  30              	AHBPrescTable:
  31 0000 00       		.byte	0
  32 0001 00       		.byte	0
  33 0002 00       		.byte	0
  34 0003 00       		.byte	0
  35 0004 00       		.byte	0
  36 0005 00       		.byte	0
  37 0006 00       		.byte	0
  38 0007 00       		.byte	0
  39 0008 01       		.byte	1
  40 0009 02       		.byte	2
  41 000a 03       		.byte	3
  42 000b 04       		.byte	4
  43 000c 06       		.byte	6
  44 000d 07       		.byte	7
  45 000e 08       		.byte	8
  46 000f 09       		.byte	9
  47              		.section	.text.SystemInit,"ax",%progbits
  48              		.align	2
  49              		.global	SystemInit
  50              		.thumb
  51              		.thumb_func
  53              	SystemInit:
  54              	.LFB29:
  55              		.file 1 "../src/system_stm32f10x.c"
   1:../src/system_stm32f10x.c **** /**
   2:../src/system_stm32f10x.c ****   ******************************************************************************
   3:../src/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:../src/system_stm32f10x.c ****   * @author  MCD Application Team
   5:../src/system_stm32f10x.c ****   * @version V3.5.0
   6:../src/system_stm32f10x.c ****   * @date    11-March-2011
   7:../src/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:../src/system_stm32f10x.c ****   * 
   9:../src/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:../src/system_stm32f10x.c ****   *     user application:
  11:../src/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:../src/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:../src/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:../src/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:../src/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:../src/system_stm32f10x.c ****   *
  17:../src/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:../src/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:../src/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:../src/system_stm32f10x.c ****   *                                     
  21:../src/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:../src/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:../src/system_stm32f10x.c ****   *                                 during program execution.
  24:../src/system_stm32f10x.c ****   *
  25:../src/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:../src/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:../src/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:../src/system_stm32f10x.c ****   *
  29:../src/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:../src/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:../src/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:../src/system_stm32f10x.c ****   *
  33:../src/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:../src/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:../src/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:../src/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:../src/system_stm32f10x.c ****   *    configuration.
  38:../src/system_stm32f10x.c ****   *        
  39:../src/system_stm32f10x.c ****   ******************************************************************************
  40:../src/system_stm32f10x.c ****   * @attention
  41:../src/system_stm32f10x.c ****   *
  42:../src/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:../src/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:../src/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:../src/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:../src/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:../src/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:../src/system_stm32f10x.c ****   *
  49:../src/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:../src/system_stm32f10x.c ****   ******************************************************************************
  51:../src/system_stm32f10x.c ****   */
  52:../src/system_stm32f10x.c **** 
  53:../src/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:../src/system_stm32f10x.c ****   * @{
  55:../src/system_stm32f10x.c ****   */
  56:../src/system_stm32f10x.c **** 
  57:../src/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:../src/system_stm32f10x.c ****   * @{
  59:../src/system_stm32f10x.c ****   */  
  60:../src/system_stm32f10x.c ****   
  61:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:../src/system_stm32f10x.c ****   * @{
  63:../src/system_stm32f10x.c ****   */
  64:../src/system_stm32f10x.c **** 
  65:../src/system_stm32f10x.c **** #include "stm32f10x.h"
  66:../src/system_stm32f10x.c **** 
  67:../src/system_stm32f10x.c **** /**
  68:../src/system_stm32f10x.c ****   * @}
  69:../src/system_stm32f10x.c ****   */
  70:../src/system_stm32f10x.c **** 
  71:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:../src/system_stm32f10x.c ****   * @{
  73:../src/system_stm32f10x.c ****   */
  74:../src/system_stm32f10x.c **** 
  75:../src/system_stm32f10x.c **** /**
  76:../src/system_stm32f10x.c ****   * @}
  77:../src/system_stm32f10x.c ****   */
  78:../src/system_stm32f10x.c **** 
  79:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:../src/system_stm32f10x.c ****   * @{
  81:../src/system_stm32f10x.c ****   */
  82:../src/system_stm32f10x.c **** 
  83:../src/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:../src/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:../src/system_stm32f10x.c ****    
  86:../src/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:../src/system_stm32f10x.c ****    ============== 
  88:../src/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:../src/system_stm32f10x.c **** 
  90:../src/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:../src/system_stm32f10x.c ****       maximum frequency.
  92:../src/system_stm32f10x.c ****       
  93:../src/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:../src/system_stm32f10x.c ****     source.
  95:../src/system_stm32f10x.c **** 
  96:../src/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:../src/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:../src/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:../src/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:../src/system_stm32f10x.c ****           used to drive the System clock.
 101:../src/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:../src/system_stm32f10x.c ****           the System clock.
 103:../src/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:../src/system_stm32f10x.c ****     */
 105:../src/system_stm32f10x.c ****     
 106:../src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:../src/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:../src/system_stm32f10x.c **** #else
 110:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
 113:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:../src/system_stm32f10x.c **** #define SYSCLK_FREQ_72MHz  72000000
 116:../src/system_stm32f10x.c **** #endif
 117:../src/system_stm32f10x.c **** 
 118:../src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:../src/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:../src/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:../src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:../src/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:../src/system_stm32f10x.c **** #endif
 124:../src/system_stm32f10x.c **** 
 125:../src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:../src/system_stm32f10x.c ****      Internal SRAM. */ 
 127:../src/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:../src/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:../src/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:../src/system_stm32f10x.c **** 
 131:../src/system_stm32f10x.c **** 
 132:../src/system_stm32f10x.c **** /**
 133:../src/system_stm32f10x.c ****   * @}
 134:../src/system_stm32f10x.c ****   */
 135:../src/system_stm32f10x.c **** 
 136:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:../src/system_stm32f10x.c ****   * @{
 138:../src/system_stm32f10x.c ****   */
 139:../src/system_stm32f10x.c **** 
 140:../src/system_stm32f10x.c **** /**
 141:../src/system_stm32f10x.c ****   * @}
 142:../src/system_stm32f10x.c ****   */
 143:../src/system_stm32f10x.c **** 
 144:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:../src/system_stm32f10x.c ****   * @{
 146:../src/system_stm32f10x.c ****   */
 147:../src/system_stm32f10x.c **** 
 148:../src/system_stm32f10x.c **** /*******************************************************************************
 149:../src/system_stm32f10x.c **** *  Clock Definitions
 150:../src/system_stm32f10x.c **** *******************************************************************************/
 151:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:../src/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:../src/system_stm32f10x.c **** #endif
 166:../src/system_stm32f10x.c **** 
 167:../src/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:../src/system_stm32f10x.c **** /**
 169:../src/system_stm32f10x.c ****   * @}
 170:../src/system_stm32f10x.c ****   */
 171:../src/system_stm32f10x.c **** 
 172:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:../src/system_stm32f10x.c ****   * @{
 174:../src/system_stm32f10x.c ****   */
 175:../src/system_stm32f10x.c **** 
 176:../src/system_stm32f10x.c **** static void SetSysClock(void);
 177:../src/system_stm32f10x.c **** 
 178:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:../src/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:../src/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:../src/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:../src/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:../src/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:../src/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:../src/system_stm32f10x.c **** #endif
 191:../src/system_stm32f10x.c **** 
 192:../src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:../src/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:../src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:../src/system_stm32f10x.c **** 
 196:../src/system_stm32f10x.c **** /**
 197:../src/system_stm32f10x.c ****   * @}
 198:../src/system_stm32f10x.c ****   */
 199:../src/system_stm32f10x.c **** 
 200:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:../src/system_stm32f10x.c ****   * @{
 202:../src/system_stm32f10x.c ****   */
 203:../src/system_stm32f10x.c **** 
 204:../src/system_stm32f10x.c **** /**
 205:../src/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:../src/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:../src/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:../src/system_stm32f10x.c ****   * @param  None
 210:../src/system_stm32f10x.c ****   * @retval None
 211:../src/system_stm32f10x.c ****   */
 212:../src/system_stm32f10x.c **** void SystemInit (void)
 213:../src/system_stm32f10x.c **** {
  56              		.loc 1 213 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 214:../src/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:../src/system_stm32f10x.c ****   /* Set HSION bit */
 216:../src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 216 0
  69 0004 154B     		ldr	r3, .L2
  70 0006 154A     		ldr	r2, .L2
  71 0008 1268     		ldr	r2, [r2, #0]
  72 000a 42F00102 		orr	r2, r2, #1
  73 000e 1A60     		str	r2, [r3, #0]
 217:../src/system_stm32f10x.c **** 
 218:../src/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  74              		.loc 1 220 0
  75 0010 124A     		ldr	r2, .L2
  76 0012 124B     		ldr	r3, .L2
  77 0014 5968     		ldr	r1, [r3, #4]
  78 0016 124B     		ldr	r3, .L2+4
  79 0018 0B40     		ands	r3, r3, r1
  80 001a 5360     		str	r3, [r2, #4]
 221:../src/system_stm32f10x.c **** #else
 222:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 223:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:../src/system_stm32f10x.c ****   
 225:../src/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  81              		.loc 1 226 0
  82 001c 0F4A     		ldr	r2, .L2
  83 001e 0F4B     		ldr	r3, .L2
  84 0020 1B68     		ldr	r3, [r3, #0]
  85 0022 23F08473 		bic	r3, r3, #17301504
  86 0026 23F48033 		bic	r3, r3, #65536
  87 002a 1360     		str	r3, [r2, #0]
 227:../src/system_stm32f10x.c **** 
 228:../src/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 229 0
  89 002c 0B4B     		ldr	r3, .L2
  90 002e 0B4A     		ldr	r2, .L2
  91 0030 1268     		ldr	r2, [r2, #0]
  92 0032 22F48022 		bic	r2, r2, #262144
  93 0036 1A60     		str	r2, [r3, #0]
 230:../src/system_stm32f10x.c **** 
 231:../src/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  94              		.loc 1 232 0
  95 0038 084B     		ldr	r3, .L2
  96 003a 084A     		ldr	r2, .L2
  97 003c 5268     		ldr	r2, [r2, #4]
  98 003e 22F4FE02 		bic	r2, r2, #8323072
  99 0042 5A60     		str	r2, [r3, #4]
 233:../src/system_stm32f10x.c **** 
 234:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:../src/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 237:../src/system_stm32f10x.c **** 
 238:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:../src/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
 240:../src/system_stm32f10x.c **** 
 241:../src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:../src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
 243:../src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:../src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:../src/system_stm32f10x.c **** 
 247:../src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:../src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:../src/system_stm32f10x.c **** #else
 250:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:../src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 100              		.loc 1 251 0
 101 0044 054B     		ldr	r3, .L2
 102 0046 4FF41F02 		mov	r2, #10420224
 103 004a 9A60     		str	r2, [r3, #8]
 252:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:../src/system_stm32f10x.c ****     
 254:../src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:../src/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:../src/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:../src/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:../src/system_stm32f10x.c **** #endif 
 259:../src/system_stm32f10x.c **** 
 260:../src/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:../src/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:../src/system_stm32f10x.c ****   SetSysClock();
 104              		.loc 1 262 0
 105 004c FFF7FEFF 		bl	SetSysClock
 263:../src/system_stm32f10x.c **** 
 264:../src/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:../src/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:../src/system_stm32f10x.c **** #else
 267:../src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 106              		.loc 1 267 0
 107 0050 044B     		ldr	r3, .L2+8
 108 0052 4FF00062 		mov	r2, #134217728
 109 0056 9A60     		str	r2, [r3, #8]
 268:../src/system_stm32f10x.c **** #endif 
 269:../src/system_stm32f10x.c **** }
 110              		.loc 1 269 0
 111 0058 80BD     		pop	{r7, pc}
 112              	.L3:
 113 005a 00BF     		.align	2
 114              	.L2:
 115 005c 00100240 		.word	1073876992
 116 0060 0000FFF8 		.word	-117506048
 117 0064 00ED00E0 		.word	-536810240
 118              		.cfi_endproc
 119              	.LFE29:
 121              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 122              		.align	2
 123              		.global	SystemCoreClockUpdate
 124              		.thumb
 125              		.thumb_func
 127              	SystemCoreClockUpdate:
 128              	.LFB30:
 270:../src/system_stm32f10x.c **** 
 271:../src/system_stm32f10x.c **** /**
 272:../src/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:../src/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:../src/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:../src/system_stm32f10x.c ****   *         other parameters.
 276:../src/system_stm32f10x.c ****   *           
 277:../src/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:../src/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:../src/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:../src/system_stm32f10x.c ****   *     
 281:../src/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:../src/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:../src/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:../src/system_stm32f10x.c ****   *             
 285:../src/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:../src/system_stm32f10x.c ****   *                                              
 287:../src/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:../src/system_stm32f10x.c ****   *                          
 289:../src/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:../src/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:../src/system_stm32f10x.c ****   *         
 292:../src/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:../src/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:../src/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:../src/system_stm32f10x.c ****   *    
 296:../src/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:../src/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:../src/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:../src/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:../src/system_stm32f10x.c ****   *                
 301:../src/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:../src/system_stm32f10x.c ****   *           value for HSE crystal.
 303:../src/system_stm32f10x.c ****   * @param  None
 304:../src/system_stm32f10x.c ****   * @retval None
 305:../src/system_stm32f10x.c ****   */
 306:../src/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:../src/system_stm32f10x.c **** {
 129              		.loc 1 307 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 16
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 80B4     		push	{r7}
 135              	.LCFI2:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 0002 85B0     		sub	sp, sp, #20
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 24
 141 0004 00AF     		add	r7, sp, #0
 142              	.LCFI4:
 143              		.cfi_def_cfa_register 7
 308:../src/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 144              		.loc 1 308 0
 145 0006 4FF00003 		mov	r3, #0
 146 000a FB60     		str	r3, [r7, #12]
 147 000c 4FF00003 		mov	r3, #0
 148 0010 BB60     		str	r3, [r7, #8]
 149 0012 4FF00003 		mov	r3, #0
 150 0016 7B60     		str	r3, [r7, #4]
 309:../src/system_stm32f10x.c **** 
 310:../src/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:../src/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 312:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:../src/system_stm32f10x.c **** 
 314:../src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:../src/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:../src/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:../src/system_stm32f10x.c ****     
 318:../src/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:../src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 151              		.loc 1 319 0
 152 0018 2D4B     		ldr	r3, .L14
 153 001a 5B68     		ldr	r3, [r3, #4]
 154 001c 03F00C03 		and	r3, r3, #12
 155 0020 FB60     		str	r3, [r7, #12]
 320:../src/system_stm32f10x.c ****   
 321:../src/system_stm32f10x.c ****   switch (tmp)
 156              		.loc 1 321 0
 157 0022 FB68     		ldr	r3, [r7, #12]
 158 0024 042B     		cmp	r3, #4
 159 0026 07D0     		beq	.L7
 160 0028 082B     		cmp	r3, #8
 161 002a 09D0     		beq	.L8
 162 002c 002B     		cmp	r3, #0
 163 002e 35D1     		bne	.L13
 164              	.L6:
 322:../src/system_stm32f10x.c ****   {
 323:../src/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:../src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 165              		.loc 1 324 0
 166 0030 284B     		ldr	r3, .L14+4
 167 0032 294A     		ldr	r2, .L14+8
 168 0034 1A60     		str	r2, [r3, #0]
 325:../src/system_stm32f10x.c ****       break;
 169              		.loc 1 325 0
 170 0036 35E0     		b	.L9
 171              	.L7:
 326:../src/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:../src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 172              		.loc 1 327 0
 173 0038 264B     		ldr	r3, .L14+4
 174 003a 274A     		ldr	r2, .L14+8
 175 003c 1A60     		str	r2, [r3, #0]
 328:../src/system_stm32f10x.c ****       break;
 176              		.loc 1 328 0
 177 003e 31E0     		b	.L9
 178              	.L8:
 329:../src/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:../src/system_stm32f10x.c **** 
 331:../src/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:../src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 179              		.loc 1 332 0
 180 0040 234B     		ldr	r3, .L14
 181 0042 5B68     		ldr	r3, [r3, #4]
 182 0044 03F47013 		and	r3, r3, #3932160
 183 0048 BB60     		str	r3, [r7, #8]
 333:../src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 184              		.loc 1 333 0
 185 004a 214B     		ldr	r3, .L14
 186 004c 5B68     		ldr	r3, [r3, #4]
 187 004e 03F48033 		and	r3, r3, #65536
 188 0052 7B60     		str	r3, [r7, #4]
 334:../src/system_stm32f10x.c ****       
 335:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:../src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 189              		.loc 1 336 0
 190 0054 BB68     		ldr	r3, [r7, #8]
 191 0056 4FEA9343 		lsr	r3, r3, #18
 192 005a 03F10203 		add	r3, r3, #2
 193 005e BB60     		str	r3, [r7, #8]
 337:../src/system_stm32f10x.c ****       
 338:../src/system_stm32f10x.c ****       if (pllsource == 0x00)
 194              		.loc 1 338 0
 195 0060 7B68     		ldr	r3, [r7, #4]
 196 0062 002B     		cmp	r3, #0
 197 0064 06D1     		bne	.L10
 339:../src/system_stm32f10x.c ****       {
 340:../src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:../src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 198              		.loc 1 341 0
 199 0066 BB68     		ldr	r3, [r7, #8]
 200 0068 1C4A     		ldr	r2, .L14+12
 201 006a 02FB03F2 		mul	r2, r2, r3
 202 006e 194B     		ldr	r3, .L14+4
 203 0070 1A60     		str	r2, [r3, #0]
 342:../src/system_stm32f10x.c ****       }
 343:../src/system_stm32f10x.c ****       else
 344:../src/system_stm32f10x.c ****       {
 345:../src/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:../src/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:../src/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:../src/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:../src/system_stm32f10x.c ****  #else
 350:../src/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:../src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:../src/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:../src/system_stm32f10x.c ****         }
 355:../src/system_stm32f10x.c ****         else
 356:../src/system_stm32f10x.c ****         {
 357:../src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:../src/system_stm32f10x.c ****         }
 359:../src/system_stm32f10x.c ****  #endif
 360:../src/system_stm32f10x.c ****       }
 361:../src/system_stm32f10x.c **** #else
 362:../src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 363:../src/system_stm32f10x.c ****       
 364:../src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 365:../src/system_stm32f10x.c ****       {
 366:../src/system_stm32f10x.c ****          pllmull += 2;
 367:../src/system_stm32f10x.c ****       }
 368:../src/system_stm32f10x.c ****       else
 369:../src/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:../src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 371:../src/system_stm32f10x.c ****       }
 372:../src/system_stm32f10x.c ****             
 373:../src/system_stm32f10x.c ****       if (pllsource == 0x00)
 374:../src/system_stm32f10x.c ****       {
 375:../src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:../src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 377:../src/system_stm32f10x.c ****       }
 378:../src/system_stm32f10x.c ****       else
 379:../src/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:../src/system_stm32f10x.c ****         
 381:../src/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:../src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 383:../src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 384:../src/system_stm32f10x.c ****         
 385:../src/system_stm32f10x.c ****         if (prediv1source == 0)
 386:../src/system_stm32f10x.c ****         { 
 387:../src/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 389:../src/system_stm32f10x.c ****         }
 390:../src/system_stm32f10x.c ****         else
 391:../src/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:../src/system_stm32f10x.c ****           
 393:../src/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:../src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 395:../src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 396:../src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 397:../src/system_stm32f10x.c ****         }
 398:../src/system_stm32f10x.c ****       }
 399:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:../src/system_stm32f10x.c ****       break;
 204              		.loc 1 400 0
 205 0072 17E0     		b	.L9
 206              	.L10:
 351:../src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 207              		.loc 1 351 0
 208 0074 164B     		ldr	r3, .L14
 209 0076 5B68     		ldr	r3, [r3, #4]
 210 0078 03F40033 		and	r3, r3, #131072
 211 007c 002B     		cmp	r3, #0
 212 007e 06D0     		beq	.L12
 353:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 213              		.loc 1 353 0
 214 0080 BB68     		ldr	r3, [r7, #8]
 215 0082 164A     		ldr	r2, .L14+12
 216 0084 02FB03F2 		mul	r2, r2, r3
 217 0088 124B     		ldr	r3, .L14+4
 218 008a 1A60     		str	r2, [r3, #0]
 219              		.loc 1 400 0
 220 008c 0AE0     		b	.L9
 221              	.L12:
 357:../src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 222              		.loc 1 357 0
 223 008e BB68     		ldr	r3, [r7, #8]
 224 0090 114A     		ldr	r2, .L14+8
 225 0092 02FB03F2 		mul	r2, r2, r3
 226 0096 0F4B     		ldr	r3, .L14+4
 227 0098 1A60     		str	r2, [r3, #0]
 228              		.loc 1 400 0
 229 009a 03E0     		b	.L9
 230              	.L13:
 401:../src/system_stm32f10x.c **** 
 402:../src/system_stm32f10x.c ****     default:
 403:../src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 231              		.loc 1 403 0
 232 009c 0D4B     		ldr	r3, .L14+4
 233 009e 0E4A     		ldr	r2, .L14+8
 234 00a0 1A60     		str	r2, [r3, #0]
 404:../src/system_stm32f10x.c ****       break;
 235              		.loc 1 404 0
 236 00a2 00BF     		nop
 237              	.L9:
 405:../src/system_stm32f10x.c ****   }
 406:../src/system_stm32f10x.c ****   
 407:../src/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:../src/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:../src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 238              		.loc 1 409 0
 239 00a4 0A4B     		ldr	r3, .L14
 240 00a6 5B68     		ldr	r3, [r3, #4]
 241 00a8 03F0F003 		and	r3, r3, #240
 242 00ac 4FEA1313 		lsr	r3, r3, #4
 243 00b0 0B4A     		ldr	r2, .L14+16
 244 00b2 D35C     		ldrb	r3, [r2, r3]
 245 00b4 DBB2     		uxtb	r3, r3
 246 00b6 FB60     		str	r3, [r7, #12]
 410:../src/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:../src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 247              		.loc 1 411 0
 248 00b8 064B     		ldr	r3, .L14+4
 249 00ba 1A68     		ldr	r2, [r3, #0]
 250 00bc FB68     		ldr	r3, [r7, #12]
 251 00be 22FA03F2 		lsr	r2, r2, r3
 252 00c2 044B     		ldr	r3, .L14+4
 253 00c4 1A60     		str	r2, [r3, #0]
 412:../src/system_stm32f10x.c **** }
 254              		.loc 1 412 0
 255 00c6 07F11407 		add	r7, r7, #20
 256 00ca BD46     		mov	sp, r7
 257 00cc 80BC     		pop	{r7}
 258 00ce 7047     		bx	lr
 259              	.L15:
 260              		.align	2
 261              	.L14:
 262 00d0 00100240 		.word	1073876992
 263 00d4 00000000 		.word	SystemCoreClock
 264 00d8 00127A00 		.word	8000000
 265 00dc 00093D00 		.word	4000000
 266 00e0 00000000 		.word	AHBPrescTable
 267              		.cfi_endproc
 268              	.LFE30:
 270              		.section	.text.SetSysClock,"ax",%progbits
 271              		.align	2
 272              		.thumb
 273              		.thumb_func
 275              	SetSysClock:
 276              	.LFB31:
 413:../src/system_stm32f10x.c **** 
 414:../src/system_stm32f10x.c **** /**
 415:../src/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:../src/system_stm32f10x.c ****   * @param  None
 417:../src/system_stm32f10x.c ****   * @retval None
 418:../src/system_stm32f10x.c ****   */
 419:../src/system_stm32f10x.c **** static void SetSysClock(void)
 420:../src/system_stm32f10x.c **** {
 277              		.loc 1 420 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI5:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 00AF     		add	r7, sp, #0
 287              	.LCFI6:
 288              		.cfi_def_cfa_register 7
 421:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:../src/system_stm32f10x.c ****   SetSysClockToHSE();
 423:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:../src/system_stm32f10x.c ****   SetSysClockTo24();
 425:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:../src/system_stm32f10x.c ****   SetSysClockTo36();
 427:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:../src/system_stm32f10x.c ****   SetSysClockTo48();
 429:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:../src/system_stm32f10x.c ****   SetSysClockTo56();  
 431:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:../src/system_stm32f10x.c ****   SetSysClockTo72();
 289              		.loc 1 432 0
 290 0004 FFF7FEFF 		bl	SetSysClockTo72
 433:../src/system_stm32f10x.c **** #endif
 434:../src/system_stm32f10x.c ****  
 435:../src/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:../src/system_stm32f10x.c ****     source (default after reset) */ 
 437:../src/system_stm32f10x.c **** }
 291              		.loc 1 437 0
 292 0008 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE31:
 296 000a 00BF     		.section	.text.SetSysClockTo72,"ax",%progbits
 297              		.align	2
 298              		.thumb
 299              		.thumb_func
 301              	SetSysClockTo72:
 302              	.LFB32:
 438:../src/system_stm32f10x.c **** 
 439:../src/system_stm32f10x.c **** /**
 440:../src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:../src/system_stm32f10x.c ****   *          before jump to __main
 442:../src/system_stm32f10x.c ****   * @param  None
 443:../src/system_stm32f10x.c ****   * @retval None
 444:../src/system_stm32f10x.c ****   */ 
 445:../src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:../src/system_stm32f10x.c **** /**
 447:../src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:../src/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:../src/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:../src/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:../src/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:../src/system_stm32f10x.c ****   * @param  None
 453:../src/system_stm32f10x.c ****   * @retval None
 454:../src/system_stm32f10x.c ****   */ 
 455:../src/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:../src/system_stm32f10x.c **** {
 457:../src/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:../src/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:../src/system_stm32f10x.c **** 
 460:../src/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:../src/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:../src/system_stm32f10x.c ****   
 463:../src/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:../src/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:../src/system_stm32f10x.c ****   
 466:../src/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:../src/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:../src/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:../src/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:../src/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:../src/system_stm32f10x.c ****   
 472:../src/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:../src/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:../src/system_stm32f10x.c **** 
 475:../src/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:../src/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:../src/system_stm32f10x.c **** 
 478:../src/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:../src/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:../src/system_stm32f10x.c **** 
 481:../src/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:../src/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:../src/system_stm32f10x.c ****    
 484:../src/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:../src/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:../src/system_stm32f10x.c ****   
 487:../src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:../src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:../src/system_stm32f10x.c **** }
 490:../src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:../src/system_stm32f10x.c **** 
 492:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:../src/system_stm32f10x.c **** /**
 494:../src/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:../src/system_stm32f10x.c ****   * @param  None
 498:../src/system_stm32f10x.c ****   * @retval None
 499:../src/system_stm32f10x.c ****   */
 500:../src/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:../src/system_stm32f10x.c **** {
 502:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:../src/system_stm32f10x.c ****   
 504:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:../src/system_stm32f10x.c ****   /* Enable HSE */    
 506:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:../src/system_stm32f10x.c ****  
 508:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:../src/system_stm32f10x.c ****   do
 510:../src/system_stm32f10x.c ****   {
 511:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:../src/system_stm32f10x.c ****     StartUpCounter++;  
 513:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:../src/system_stm32f10x.c **** 
 515:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:../src/system_stm32f10x.c ****   {
 517:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:../src/system_stm32f10x.c ****   }
 519:../src/system_stm32f10x.c ****   else
 520:../src/system_stm32f10x.c ****   {
 521:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:../src/system_stm32f10x.c ****   }  
 523:../src/system_stm32f10x.c **** 
 524:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:../src/system_stm32f10x.c ****   {
 526:../src/system_stm32f10x.c **** 
 527:../src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:../src/system_stm32f10x.c **** 
 531:../src/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:../src/system_stm32f10x.c **** 
 534:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:../src/system_stm32f10x.c **** #else
 537:../src/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:../src/system_stm32f10x.c **** 	{
 539:../src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:../src/system_stm32f10x.c **** 	}
 541:../src/system_stm32f10x.c **** 	else
 542:../src/system_stm32f10x.c **** 	{
 543:../src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:../src/system_stm32f10x.c **** 	}
 545:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:../src/system_stm32f10x.c **** #endif
 547:../src/system_stm32f10x.c ****  
 548:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:../src/system_stm32f10x.c ****       
 551:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:../src/system_stm32f10x.c ****     
 554:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:../src/system_stm32f10x.c ****     
 557:../src/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:../src/system_stm32f10x.c **** 
 561:../src/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:../src/system_stm32f10x.c ****     {
 564:../src/system_stm32f10x.c ****     }
 565:../src/system_stm32f10x.c ****   }
 566:../src/system_stm32f10x.c ****   else
 567:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:../src/system_stm32f10x.c ****   }  
 570:../src/system_stm32f10x.c **** }
 571:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:../src/system_stm32f10x.c **** /**
 573:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:../src/system_stm32f10x.c ****   * @param  None
 577:../src/system_stm32f10x.c ****   * @retval None
 578:../src/system_stm32f10x.c ****   */
 579:../src/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:../src/system_stm32f10x.c **** {
 581:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:../src/system_stm32f10x.c ****   
 583:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:../src/system_stm32f10x.c ****   /* Enable HSE */    
 585:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:../src/system_stm32f10x.c ****  
 587:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:../src/system_stm32f10x.c ****   do
 589:../src/system_stm32f10x.c ****   {
 590:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:../src/system_stm32f10x.c ****     StartUpCounter++;  
 592:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:../src/system_stm32f10x.c **** 
 594:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:../src/system_stm32f10x.c ****   {
 596:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:../src/system_stm32f10x.c ****   }
 598:../src/system_stm32f10x.c ****   else
 599:../src/system_stm32f10x.c ****   {
 600:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:../src/system_stm32f10x.c ****   }  
 602:../src/system_stm32f10x.c **** 
 603:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:../src/system_stm32f10x.c ****   {
 605:../src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:../src/system_stm32f10x.c **** 
 609:../src/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:../src/system_stm32f10x.c **** #endif
 613:../src/system_stm32f10x.c ****  
 614:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:../src/system_stm32f10x.c ****       
 617:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:../src/system_stm32f10x.c ****     
 620:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:../src/system_stm32f10x.c ****     
 623:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:../src/system_stm32f10x.c **** 
 630:../src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:../src/system_stm32f10x.c ****   
 637:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 638:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:../src/system_stm32f10x.c ****     {
 642:../src/system_stm32f10x.c ****     }   
 643:../src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:../src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:../src/system_stm32f10x.c **** #else    
 648:../src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:../src/system_stm32f10x.c **** 
 653:../src/system_stm32f10x.c ****     /* Enable PLL */
 654:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:../src/system_stm32f10x.c **** 
 656:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:../src/system_stm32f10x.c ****     {
 659:../src/system_stm32f10x.c ****     }
 660:../src/system_stm32f10x.c **** 
 661:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:../src/system_stm32f10x.c **** 
 665:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:../src/system_stm32f10x.c ****     {
 668:../src/system_stm32f10x.c ****     }
 669:../src/system_stm32f10x.c ****   }
 670:../src/system_stm32f10x.c ****   else
 671:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:../src/system_stm32f10x.c ****   } 
 674:../src/system_stm32f10x.c **** }
 675:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:../src/system_stm32f10x.c **** /**
 677:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:../src/system_stm32f10x.c ****   * @param  None
 681:../src/system_stm32f10x.c ****   * @retval None
 682:../src/system_stm32f10x.c ****   */
 683:../src/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:../src/system_stm32f10x.c **** {
 685:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 686:../src/system_stm32f10x.c ****   
 687:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:../src/system_stm32f10x.c ****   /* Enable HSE */    
 689:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 690:../src/system_stm32f10x.c ****  
 691:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:../src/system_stm32f10x.c ****   do
 693:../src/system_stm32f10x.c ****   {
 694:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 695:../src/system_stm32f10x.c ****     StartUpCounter++;  
 696:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 697:../src/system_stm32f10x.c **** 
 698:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 699:../src/system_stm32f10x.c ****   {
 700:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 701:../src/system_stm32f10x.c ****   }
 702:../src/system_stm32f10x.c ****   else
 703:../src/system_stm32f10x.c ****   {
 704:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 705:../src/system_stm32f10x.c ****   }  
 706:../src/system_stm32f10x.c **** 
 707:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 708:../src/system_stm32f10x.c ****   {
 709:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 711:../src/system_stm32f10x.c **** 
 712:../src/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 714:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 715:../src/system_stm32f10x.c ****  
 716:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 718:../src/system_stm32f10x.c ****       
 719:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 721:../src/system_stm32f10x.c ****     
 722:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 724:../src/system_stm32f10x.c ****     
 725:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:../src/system_stm32f10x.c ****     
 728:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:../src/system_stm32f10x.c **** 
 733:../src/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:../src/system_stm32f10x.c ****         
 736:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:../src/system_stm32f10x.c ****   
 741:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 742:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:../src/system_stm32f10x.c ****     {
 746:../src/system_stm32f10x.c ****     }
 747:../src/system_stm32f10x.c ****     
 748:../src/system_stm32f10x.c **** #else    
 749:../src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 751:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 752:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:../src/system_stm32f10x.c **** 
 754:../src/system_stm32f10x.c ****     /* Enable PLL */
 755:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 756:../src/system_stm32f10x.c **** 
 757:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 759:../src/system_stm32f10x.c ****     {
 760:../src/system_stm32f10x.c ****     }
 761:../src/system_stm32f10x.c **** 
 762:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 764:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 765:../src/system_stm32f10x.c **** 
 766:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 768:../src/system_stm32f10x.c ****     {
 769:../src/system_stm32f10x.c ****     }
 770:../src/system_stm32f10x.c ****   }
 771:../src/system_stm32f10x.c ****   else
 772:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:../src/system_stm32f10x.c ****   } 
 775:../src/system_stm32f10x.c **** }
 776:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 777:../src/system_stm32f10x.c **** /**
 778:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 779:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 780:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 781:../src/system_stm32f10x.c ****   * @param  None
 782:../src/system_stm32f10x.c ****   * @retval None
 783:../src/system_stm32f10x.c ****   */
 784:../src/system_stm32f10x.c **** static void SetSysClockTo48(void)
 785:../src/system_stm32f10x.c **** {
 786:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 787:../src/system_stm32f10x.c ****   
 788:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 789:../src/system_stm32f10x.c ****   /* Enable HSE */    
 790:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 791:../src/system_stm32f10x.c ****  
 792:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 793:../src/system_stm32f10x.c ****   do
 794:../src/system_stm32f10x.c ****   {
 795:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 796:../src/system_stm32f10x.c ****     StartUpCounter++;  
 797:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 798:../src/system_stm32f10x.c **** 
 799:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800:../src/system_stm32f10x.c ****   {
 801:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 802:../src/system_stm32f10x.c ****   }
 803:../src/system_stm32f10x.c ****   else
 804:../src/system_stm32f10x.c ****   {
 805:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 806:../src/system_stm32f10x.c ****   }  
 807:../src/system_stm32f10x.c **** 
 808:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 809:../src/system_stm32f10x.c ****   {
 810:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 811:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 812:../src/system_stm32f10x.c **** 
 813:../src/system_stm32f10x.c ****     /* Flash 1 wait state */
 814:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 815:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 816:../src/system_stm32f10x.c ****  
 817:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 818:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 819:../src/system_stm32f10x.c ****       
 820:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 821:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 822:../src/system_stm32f10x.c ****     
 823:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 824:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 825:../src/system_stm32f10x.c ****     
 826:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 827:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 828:../src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 829:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 830:../src/system_stm32f10x.c ****         
 831:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 832:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 833:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 834:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 835:../src/system_stm32f10x.c ****   
 836:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 837:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 838:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 839:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 840:../src/system_stm32f10x.c ****     {
 841:../src/system_stm32f10x.c ****     }
 842:../src/system_stm32f10x.c ****     
 843:../src/system_stm32f10x.c ****    
 844:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 845:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 846:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 847:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 848:../src/system_stm32f10x.c **** #else    
 849:../src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 850:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 851:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 852:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 853:../src/system_stm32f10x.c **** 
 854:../src/system_stm32f10x.c ****     /* Enable PLL */
 855:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 856:../src/system_stm32f10x.c **** 
 857:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 858:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 859:../src/system_stm32f10x.c ****     {
 860:../src/system_stm32f10x.c ****     }
 861:../src/system_stm32f10x.c **** 
 862:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 863:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 864:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 865:../src/system_stm32f10x.c **** 
 866:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 867:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 868:../src/system_stm32f10x.c ****     {
 869:../src/system_stm32f10x.c ****     }
 870:../src/system_stm32f10x.c ****   }
 871:../src/system_stm32f10x.c ****   else
 872:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 873:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 874:../src/system_stm32f10x.c ****   } 
 875:../src/system_stm32f10x.c **** }
 876:../src/system_stm32f10x.c **** 
 877:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 878:../src/system_stm32f10x.c **** /**
 879:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 880:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 881:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 882:../src/system_stm32f10x.c ****   * @param  None
 883:../src/system_stm32f10x.c ****   * @retval None
 884:../src/system_stm32f10x.c ****   */
 885:../src/system_stm32f10x.c **** static void SetSysClockTo56(void)
 886:../src/system_stm32f10x.c **** {
 887:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 888:../src/system_stm32f10x.c ****   
 889:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 890:../src/system_stm32f10x.c ****   /* Enable HSE */    
 891:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 892:../src/system_stm32f10x.c ****  
 893:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 894:../src/system_stm32f10x.c ****   do
 895:../src/system_stm32f10x.c ****   {
 896:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 897:../src/system_stm32f10x.c ****     StartUpCounter++;  
 898:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 899:../src/system_stm32f10x.c **** 
 900:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 901:../src/system_stm32f10x.c ****   {
 902:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 903:../src/system_stm32f10x.c ****   }
 904:../src/system_stm32f10x.c ****   else
 905:../src/system_stm32f10x.c ****   {
 906:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 907:../src/system_stm32f10x.c ****   }  
 908:../src/system_stm32f10x.c **** 
 909:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 910:../src/system_stm32f10x.c ****   {
 911:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 912:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 913:../src/system_stm32f10x.c **** 
 914:../src/system_stm32f10x.c ****     /* Flash 2 wait state */
 915:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 916:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 917:../src/system_stm32f10x.c ****  
 918:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 919:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 920:../src/system_stm32f10x.c ****       
 921:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 922:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 923:../src/system_stm32f10x.c ****     
 924:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 925:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 926:../src/system_stm32f10x.c **** 
 927:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 928:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 929:../src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 930:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 931:../src/system_stm32f10x.c ****         
 932:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 933:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 934:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 935:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 936:../src/system_stm32f10x.c ****   
 937:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 938:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 939:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 940:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 941:../src/system_stm32f10x.c ****     {
 942:../src/system_stm32f10x.c ****     }
 943:../src/system_stm32f10x.c ****     
 944:../src/system_stm32f10x.c ****    
 945:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 946:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 947:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 948:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL7); 
 949:../src/system_stm32f10x.c **** #else     
 950:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 951:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 952:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 953:../src/system_stm32f10x.c **** 
 954:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 955:../src/system_stm32f10x.c **** 
 956:../src/system_stm32f10x.c ****     /* Enable PLL */
 957:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 958:../src/system_stm32f10x.c **** 
 959:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 960:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 961:../src/system_stm32f10x.c ****     {
 962:../src/system_stm32f10x.c ****     }
 963:../src/system_stm32f10x.c **** 
 964:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 965:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 966:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 967:../src/system_stm32f10x.c **** 
 968:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 969:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 970:../src/system_stm32f10x.c ****     {
 971:../src/system_stm32f10x.c ****     }
 972:../src/system_stm32f10x.c ****   }
 973:../src/system_stm32f10x.c ****   else
 974:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 975:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 976:../src/system_stm32f10x.c ****   } 
 977:../src/system_stm32f10x.c **** }
 978:../src/system_stm32f10x.c **** 
 979:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 980:../src/system_stm32f10x.c **** /**
 981:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 982:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 983:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 984:../src/system_stm32f10x.c ****   * @param  None
 985:../src/system_stm32f10x.c ****   * @retval None
 986:../src/system_stm32f10x.c ****   */
 987:../src/system_stm32f10x.c **** static void SetSysClockTo72(void)
 988:../src/system_stm32f10x.c **** {
 303              		.loc 1 988 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308 0000 80B4     		push	{r7}
 309              	.LCFI7:
 310              		.cfi_def_cfa_offset 4
 311              		.cfi_offset 7, -4
 312 0002 83B0     		sub	sp, sp, #12
 313              	.LCFI8:
 314              		.cfi_def_cfa_offset 16
 315 0004 00AF     		add	r7, sp, #0
 316              	.LCFI9:
 317              		.cfi_def_cfa_register 7
 989:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 318              		.loc 1 989 0
 319 0006 4FF00003 		mov	r3, #0
 320 000a 7B60     		str	r3, [r7, #4]
 321 000c 4FF00003 		mov	r3, #0
 322 0010 3B60     		str	r3, [r7, #0]
 990:../src/system_stm32f10x.c ****   
 991:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 992:../src/system_stm32f10x.c ****   /* Enable HSE */    
 993:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 323              		.loc 1 993 0
 324 0012 3B4B     		ldr	r3, .L25
 325 0014 3A4A     		ldr	r2, .L25
 326 0016 1268     		ldr	r2, [r2, #0]
 327 0018 42F48032 		orr	r2, r2, #65536
 328 001c 1A60     		str	r2, [r3, #0]
 329              	.L19:
 994:../src/system_stm32f10x.c ****  
 995:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 996:../src/system_stm32f10x.c ****   do
 997:../src/system_stm32f10x.c ****   {
 998:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 330              		.loc 1 998 0 discriminator 1
 331 001e 384B     		ldr	r3, .L25
 332 0020 1B68     		ldr	r3, [r3, #0]
 333 0022 03F40033 		and	r3, r3, #131072
 334 0026 3B60     		str	r3, [r7, #0]
 999:../src/system_stm32f10x.c ****     StartUpCounter++;  
 335              		.loc 1 999 0 discriminator 1
 336 0028 7B68     		ldr	r3, [r7, #4]
 337 002a 03F10103 		add	r3, r3, #1
 338 002e 7B60     		str	r3, [r7, #4]
1000:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 339              		.loc 1 1000 0 discriminator 1
 340 0030 3B68     		ldr	r3, [r7, #0]
 341 0032 002B     		cmp	r3, #0
 342 0034 03D1     		bne	.L18
 343 0036 7B68     		ldr	r3, [r7, #4]
 344 0038 B3F5A06F 		cmp	r3, #1280
 345 003c EFD1     		bne	.L19
 346              	.L18:
1001:../src/system_stm32f10x.c **** 
1002:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 347              		.loc 1 1002 0
 348 003e 304B     		ldr	r3, .L25
 349 0040 1B68     		ldr	r3, [r3, #0]
 350 0042 03F40033 		and	r3, r3, #131072
 351 0046 002B     		cmp	r3, #0
 352 0048 03D0     		beq	.L20
1003:../src/system_stm32f10x.c ****   {
1004:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 353              		.loc 1 1004 0
 354 004a 4FF00103 		mov	r3, #1
 355 004e 3B60     		str	r3, [r7, #0]
 356 0050 02E0     		b	.L21
 357              	.L20:
1005:../src/system_stm32f10x.c ****   }
1006:../src/system_stm32f10x.c ****   else
1007:../src/system_stm32f10x.c ****   {
1008:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 358              		.loc 1 1008 0
 359 0052 4FF00003 		mov	r3, #0
 360 0056 3B60     		str	r3, [r7, #0]
 361              	.L21:
1009:../src/system_stm32f10x.c ****   }  
1010:../src/system_stm32f10x.c **** 
1011:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 362              		.loc 1 1011 0
 363 0058 3B68     		ldr	r3, [r7, #0]
 364 005a 012B     		cmp	r3, #1
 365 005c 4BD1     		bne	.L17
1012:../src/system_stm32f10x.c ****   {
1013:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
1014:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 366              		.loc 1 1014 0
 367 005e 294B     		ldr	r3, .L25+4
 368 0060 284A     		ldr	r2, .L25+4
 369 0062 1268     		ldr	r2, [r2, #0]
 370 0064 42F01002 		orr	r2, r2, #16
 371 0068 1A60     		str	r2, [r3, #0]
1015:../src/system_stm32f10x.c **** 
1016:../src/system_stm32f10x.c ****     /* Flash 2 wait state */
1017:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 372              		.loc 1 1017 0
 373 006a 264B     		ldr	r3, .L25+4
 374 006c 254A     		ldr	r2, .L25+4
 375 006e 1268     		ldr	r2, [r2, #0]
 376 0070 22F00302 		bic	r2, r2, #3
 377 0074 1A60     		str	r2, [r3, #0]
1018:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 378              		.loc 1 1018 0
 379 0076 234B     		ldr	r3, .L25+4
 380 0078 224A     		ldr	r2, .L25+4
 381 007a 1268     		ldr	r2, [r2, #0]
 382 007c 42F00202 		orr	r2, r2, #2
 383 0080 1A60     		str	r2, [r3, #0]
1019:../src/system_stm32f10x.c **** 
1020:../src/system_stm32f10x.c ****  
1021:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
1022:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 384              		.loc 1 1022 0
 385 0082 1F4B     		ldr	r3, .L25
 386 0084 1E4A     		ldr	r2, .L25
 387 0086 5268     		ldr	r2, [r2, #4]
 388 0088 5A60     		str	r2, [r3, #4]
1023:../src/system_stm32f10x.c ****       
1024:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
1025:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 389              		.loc 1 1025 0
 390 008a 1D4B     		ldr	r3, .L25
 391 008c 1C4A     		ldr	r2, .L25
 392 008e 5268     		ldr	r2, [r2, #4]
 393 0090 5A60     		str	r2, [r3, #4]
1026:../src/system_stm32f10x.c ****     
1027:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
1028:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 394              		.loc 1 1028 0
 395 0092 1B4B     		ldr	r3, .L25
 396 0094 1A4A     		ldr	r2, .L25
 397 0096 5268     		ldr	r2, [r2, #4]
 398 0098 42F48062 		orr	r2, r2, #1024
 399 009c 5A60     		str	r2, [r3, #4]
1029:../src/system_stm32f10x.c **** 
1030:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
1031:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
1032:../src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
1033:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
1034:../src/system_stm32f10x.c ****         
1035:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
1036:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
1037:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
1038:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
1039:../src/system_stm32f10x.c ****   
1040:../src/system_stm32f10x.c ****     /* Enable PLL2 */
1041:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
1042:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
1043:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
1044:../src/system_stm32f10x.c ****     {
1045:../src/system_stm32f10x.c ****     }
1046:../src/system_stm32f10x.c ****     
1047:../src/system_stm32f10x.c ****    
1048:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
1049:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
1050:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
1051:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
1052:../src/system_stm32f10x.c **** #else    
1053:../src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
1054:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 400              		.loc 1 1054 0
 401 009e 184B     		ldr	r3, .L25
 402 00a0 174A     		ldr	r2, .L25
 403 00a2 5268     		ldr	r2, [r2, #4]
 404 00a4 22F47C12 		bic	r2, r2, #4128768
 405 00a8 5A60     		str	r2, [r3, #4]
1055:../src/system_stm32f10x.c ****                                         RCC_CFGR_PLLMULL));
1056:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 406              		.loc 1 1056 0
 407 00aa 154B     		ldr	r3, .L25
 408 00ac 144A     		ldr	r2, .L25
 409 00ae 5268     		ldr	r2, [r2, #4]
 410 00b0 42F4E812 		orr	r2, r2, #1900544
 411 00b4 5A60     		str	r2, [r3, #4]
1057:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
1058:../src/system_stm32f10x.c **** 
1059:../src/system_stm32f10x.c ****     /* Enable PLL */
1060:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 412              		.loc 1 1060 0
 413 00b6 124B     		ldr	r3, .L25
 414 00b8 114A     		ldr	r2, .L25
 415 00ba 1268     		ldr	r2, [r2, #0]
 416 00bc 42F08072 		orr	r2, r2, #16777216
 417 00c0 1A60     		str	r2, [r3, #0]
1061:../src/system_stm32f10x.c **** 
1062:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
1063:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 418              		.loc 1 1063 0
 419 00c2 00BF     		nop
 420              	.L23:
 421              		.loc 1 1063 0 is_stmt 0 discriminator 1
 422 00c4 0E4B     		ldr	r3, .L25
 423 00c6 1B68     		ldr	r3, [r3, #0]
 424 00c8 03F00073 		and	r3, r3, #33554432
 425 00cc 002B     		cmp	r3, #0
 426 00ce F9D0     		beq	.L23
1064:../src/system_stm32f10x.c ****     {
1065:../src/system_stm32f10x.c ****     }
1066:../src/system_stm32f10x.c ****     
1067:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
1068:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 427              		.loc 1 1068 0 is_stmt 1
 428 00d0 0B4B     		ldr	r3, .L25
 429 00d2 0B4A     		ldr	r2, .L25
 430 00d4 5268     		ldr	r2, [r2, #4]
 431 00d6 22F00302 		bic	r2, r2, #3
 432 00da 5A60     		str	r2, [r3, #4]
1069:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 433              		.loc 1 1069 0
 434 00dc 084B     		ldr	r3, .L25
 435 00de 084A     		ldr	r2, .L25
 436 00e0 5268     		ldr	r2, [r2, #4]
 437 00e2 42F00202 		orr	r2, r2, #2
 438 00e6 5A60     		str	r2, [r3, #4]
1070:../src/system_stm32f10x.c **** 
1071:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
1072:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 439              		.loc 1 1072 0
 440 00e8 00BF     		nop
 441              	.L24:
 442              		.loc 1 1072 0 is_stmt 0 discriminator 1
 443 00ea 054B     		ldr	r3, .L25
 444 00ec 5B68     		ldr	r3, [r3, #4]
 445 00ee 03F00C03 		and	r3, r3, #12
 446 00f2 082B     		cmp	r3, #8
 447 00f4 F9D1     		bne	.L24
 448              	.L17:
1073:../src/system_stm32f10x.c ****     {
1074:../src/system_stm32f10x.c ****     }
1075:../src/system_stm32f10x.c ****   }
1076:../src/system_stm32f10x.c ****   else
1077:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
1078:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
1079:../src/system_stm32f10x.c ****   }
1080:../src/system_stm32f10x.c **** }
 449              		.loc 1 1080 0 is_stmt 1
 450 00f6 07F10C07 		add	r7, r7, #12
 451 00fa BD46     		mov	sp, r7
 452 00fc 80BC     		pop	{r7}
 453 00fe 7047     		bx	lr
 454              	.L26:
 455              		.align	2
 456              	.L25:
 457 0100 00100240 		.word	1073876992
 458 0104 00200240 		.word	1073881088
 459              		.cfi_endproc
 460              	.LFE32:
 462              		.text
 463              	.Letext0:
 464              		.file 2 "/home/dragon/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-ea
 465              		.file 3 "/home/dragon/workspace/STM32F103C8T6_LibV3.5/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMS
 466              		.file 4 "/home/dragon/workspace/STM32F103C8T6_LibV3.5/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMS
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
     /tmp/ccupd9E8.s:23     .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccupd9E8.s:20     .data.SystemCoreClock:00000000 $d
     /tmp/ccupd9E8.s:30     .data.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccupd9E8.s:27     .data.AHBPrescTable:00000000 $d
     /tmp/ccupd9E8.s:48     .text.SystemInit:00000000 $t
     /tmp/ccupd9E8.s:53     .text.SystemInit:00000000 SystemInit
     /tmp/ccupd9E8.s:275    .text.SetSysClock:00000000 SetSysClock
     /tmp/ccupd9E8.s:115    .text.SystemInit:0000005c $d
     /tmp/ccupd9E8.s:122    .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccupd9E8.s:127    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccupd9E8.s:262    .text.SystemCoreClockUpdate:000000d0 $d
     /tmp/ccupd9E8.s:271    .text.SetSysClock:00000000 $t
     /tmp/ccupd9E8.s:301    .text.SetSysClockTo72:00000000 SetSysClockTo72
     /tmp/ccupd9E8.s:297    .text.SetSysClockTo72:00000000 $t
     /tmp/ccupd9E8.s:457    .text.SetSysClockTo72:00000100 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.3f1c4c3ecf94fe9b5c343fe975e01068
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.968bcf08d813e68e57c280a4da69fa5a
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe

NO UNDEFINED SYMBOLS
